{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Utilisateur\\\\Downloads\\\\zelda\\\\zelda-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\Utilisateur\\\\Downloads\\\\zelda\\\\zelda-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Utilisateur\\\\Downloads\\\\zelda\\\\zelda-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Utilisateur\\\\Downloads\\\\zelda\\\\zelda-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Utilisateur\\\\Downloads\\\\zelda\\\\zelda-fe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Downloads\\\\zelda\\\\zelda-fe\\\\src\\\\views\\\\Homepage.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport map from './map';\nimport '../scss/style.scss';\nimport MapUtil from '../util/MapUtil';\nimport PhysicsUtil from '../util/PhysicsUtil';\nimport TimeUtil from '../util/TimeUtil';\nimport { FormattedMessage } from 'react-intl';\nimport LeaderboardModal from './LeaderboardModal';\nimport { getTopUsers } from '../actions/users/users';\n\nvar Homepage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Homepage, _React$Component);\n\n  function Homepage(props) {\n    var _this;\n\n    _classCallCheck(this, Homepage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Homepage).call(this, props));\n\n    _this.initState = function () {\n      return {\n        x: _this.START_X,\n        y: _this.START_Y,\n        hasDiamond: false,\n        start_date: new Date(),\n        modal: null\n      };\n    };\n\n    _this.componentDidMount = function () {\n      // Watch keyboard events\n      document.addEventListener(\"keydown\", function (e) {\n        return _this.handleKeyDown(e.keyCode);\n      }); // Refresh the component every second for the timer to refresh\n\n      _this._intervalId = setInterval(function () {\n        return _this.forceUpdate();\n      }, 1000);\n\n      _this.getLeaderboard();\n    };\n\n    _this.getLeaderboard = function () {\n      // Fetch leaderboard\n      _this.props.onGetTopUsers(5);\n    };\n\n    _this.componentWillUnmount = function () {\n      // Clear refresh function\n      clearInterval(_this._intervalId);\n    };\n\n    _this.handleKeyDown = function (keyCode) {\n      _this.setState(function (prevState) {\n        var newState = _objectSpread({}, prevState);\n\n        switch (keyCode) {\n          case _this.TOP_ARROW_KEYCODE:\n            newState.y -= 2;\n            break;\n\n          case _this.RIGHT_ARROW_KEYCODE:\n            newState.x += 2;\n            break;\n\n          case _this.DOWN_ARROW_KEYCODE:\n            newState.y += 2;\n            break;\n\n          case _this.LEFT_ARROW_KEYCODE:\n            newState.x -= 2;\n            break;\n\n          default:\n            break;\n        }\n\n        var heroNewHitbox = {\n          x: newState.x,\n          y: newState.y,\n          w: 20,\n          h: 20\n        }; // If hero has the diamond and exits\n\n        if (prevState.hasDiamond && PhysicsUtil.overlap(heroNewHitbox, _this.MAP_EXIT)) {\n          return {\n            modal: React.createElement(LeaderboardModal, {\n              time: TimeUtil.msUntilNow(_this.state.start_date),\n              toggle: _this.closeModal,\n              playAgain: function playAgain() {\n                return _this.setState(_this.initState());\n              },\n              onAddToLeaderboard: _this.getLeaderboard,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 103\n              },\n              __self: this\n            })\n          };\n        } // If hero overlaps the diamond, fetch it\n\n\n        if (!prevState.hasDiamond && PhysicsUtil.overlaps(heroNewHitbox, _this.MAP_DIAMOND)) {\n          return _objectSpread({}, newState, {\n            hasDiamond: true\n          });\n        } // If hero overlaps the mud, back to start position!\n\n\n        if (PhysicsUtil.overlaps(heroNewHitbox, _this.MAP_MUDS)) {\n          return _this.initState();\n        } // If hero does not overlap walls and does not get out of map bounds, authorize moving\n\n\n        if (!PhysicsUtil.overlaps(heroNewHitbox, _this.MAP_WALLS) && PhysicsUtil.withinStrict(heroNewHitbox, _this.MAP_BOUNDS)) {\n          return newState;\n        } else {\n          return prevState;\n        }\n      });\n    };\n\n    _this.closeModal = function () {\n      return _this.setState({\n        modal: null\n      });\n    };\n\n    _this.render = function () {\n      var users = _this.props.users;\n      return React.createElement(\"div\", {\n        className: \"position-relative\",\n        style: {\n          width: _this.MAP_BOUNDS.w + \"px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"position-absolute pixel-font ml-2 mt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"Timer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }), \" : \", TimeUtil.msToTime(TimeUtil.msUntilNow(_this.state.start_date))), users && users.length > 0 && React.createElement(\"div\", {\n        className: \"position-absolute pixel-font mt-2\",\n        style: {\n          right: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"Leaderboard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      })), users.map(function (u) {\n        return React.createElement(\"div\", {\n          key: u._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, u.username, \" - \", TimeUtil.msToTime(u.time), \"s\");\n      })), MapUtil.toHtml(map, !_this.state.hasDiamond), React.createElement(\"div\", {\n        className: \"position-absolute bg-danger w-20px h-20px\",\n        style: {\n          left: _this.state.x,\n          top: _this.state.y\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }), _this.state.modal);\n    };\n\n    _this.START_X = map.startPosition.posX * 20;\n    _this.START_Y = map.startPosition.posY * 20; // Debug position to start close to the diamond\n    // this.START_X = 100;\n    // this.START_Y = 40;\n\n    _this.state = _this.initState(); // Keyboard keyCodes\n\n    _this.TOP_ARROW_KEYCODE = 38;\n    _this.RIGHT_ARROW_KEYCODE = 39;\n    _this.DOWN_ARROW_KEYCODE = 40;\n    _this.LEFT_ARROW_KEYCODE = 37; // Geometric representation of the map\n\n    _this.MAP_BOUNDS = MapUtil.bounds(map);\n    _this.MAP_WALLS = MapUtil.toGeometry(map, '+');\n    _this.MAP_MUDS = MapUtil.toGeometry(map, 'x');\n    _this.MAP_DIAMOND = MapUtil.toGeometry(map, '$');\n    _this.MAP_EXIT = {\n      x: 799,\n      y: 360,\n      w: 2,\n      h: 20\n    };\n    return _this;\n  }\n\n  return Homepage;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    users: state.users\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onGetTopUsers: function onGetTopUsers(cbk) {\n      return dispatch(getTopUsers(cbk));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Homepage);","map":{"version":3,"sources":["C:\\Users\\Utilisateur\\Downloads\\zelda\\zelda-fe\\src\\views\\Homepage.js"],"names":["React","connect","map","MapUtil","PhysicsUtil","TimeUtil","FormattedMessage","LeaderboardModal","getTopUsers","Homepage","props","initState","x","START_X","y","START_Y","hasDiamond","start_date","Date","modal","componentDidMount","document","addEventListener","e","handleKeyDown","keyCode","_intervalId","setInterval","forceUpdate","getLeaderboard","onGetTopUsers","componentWillUnmount","clearInterval","setState","prevState","newState","TOP_ARROW_KEYCODE","RIGHT_ARROW_KEYCODE","DOWN_ARROW_KEYCODE","LEFT_ARROW_KEYCODE","heroNewHitbox","w","h","overlap","MAP_EXIT","msUntilNow","state","closeModal","overlaps","MAP_DIAMOND","MAP_MUDS","MAP_WALLS","withinStrict","MAP_BOUNDS","render","users","width","msToTime","length","right","u","_id","username","time","toHtml","left","top","startPosition","posX","posY","bounds","toGeometry","Component","mapStateToProps","mapDispatchToProps","dispatch","cbk"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport map from './map';\r\nimport '../scss/style.scss';\r\nimport MapUtil from '../util/MapUtil';\r\nimport PhysicsUtil from '../util/PhysicsUtil';\r\nimport TimeUtil from '../util/TimeUtil';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport LeaderboardModal from './LeaderboardModal';\r\nimport { getTopUsers } from '../actions/users/users';\r\n\r\n\r\nclass Homepage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.START_X = map.startPosition.posX * 20;\r\n        this.START_Y = map.startPosition.posY * 20;\r\n\r\n        // Debug position to start close to the diamond\r\n        // this.START_X = 100;\r\n        // this.START_Y = 40;\r\n\r\n        this.state = this.initState();\r\n\r\n        // Keyboard keyCodes\r\n        this.TOP_ARROW_KEYCODE = 38;\r\n        this.RIGHT_ARROW_KEYCODE = 39;\r\n        this.DOWN_ARROW_KEYCODE = 40;\r\n        this.LEFT_ARROW_KEYCODE = 37;\r\n\r\n        // Geometric representation of the map\r\n        this.MAP_BOUNDS = MapUtil.bounds(map);\r\n        this.MAP_WALLS = MapUtil.toGeometry(map, '+');\r\n        this.MAP_MUDS = MapUtil.toGeometry(map, 'x');\r\n        this.MAP_DIAMOND = MapUtil.toGeometry(map, '$');\r\n        this.MAP_EXIT = { x: 799, y: 360, w: 2, h: 20 };\r\n    }\r\n\r\n    initState = () => {\r\n        return {\r\n            x: this.START_X,\r\n            y: this.START_Y,\r\n            hasDiamond: false,\r\n            start_date: new Date(),\r\n\r\n            modal: null\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        // Watch keyboard events\r\n        document.addEventListener(\"keydown\", (e) => this.handleKeyDown(e.keyCode));\r\n\r\n        // Refresh the component every second for the timer to refresh\r\n        this._intervalId = setInterval(() => this.forceUpdate(), 1000);\r\n\r\n        this.getLeaderboard();\r\n    }\r\n\r\n    getLeaderboard = () => {\r\n        // Fetch leaderboard\r\n        this.props.onGetTopUsers(5);\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        // Clear refresh function\r\n        clearInterval(this._intervalId);\r\n    }\r\n\r\n    handleKeyDown = (keyCode) => {\r\n        this.setState(prevState => {\r\n            let newState = { ...prevState };\r\n\r\n            switch (keyCode) {\r\n                case this.TOP_ARROW_KEYCODE:\r\n                    newState.y -= 2;\r\n                    break;\r\n\r\n                case this.RIGHT_ARROW_KEYCODE:\r\n                    newState.x += 2;\r\n                    break;\r\n\r\n                case this.DOWN_ARROW_KEYCODE:\r\n                    newState.y += 2;\r\n                    break;\r\n\r\n                case this.LEFT_ARROW_KEYCODE:\r\n                    newState.x -= 2;\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n\r\n            }\r\n\r\n            const heroNewHitbox = { x: newState.x, y: newState.y, w: 20, h: 20 };\r\n\r\n            // If hero has the diamond and exits\r\n            if(prevState.hasDiamond && PhysicsUtil.overlap(heroNewHitbox, this.MAP_EXIT)){\r\n                return {\r\n                    modal: <LeaderboardModal\r\n                        time={TimeUtil.msUntilNow(this.state.start_date)}\r\n                        toggle={this.closeModal}\r\n                        playAgain={() => this.setState(this.initState())}\r\n                        onAddToLeaderboard={this.getLeaderboard} />\r\n                };\r\n            }\r\n            // If hero overlaps the diamond, fetch it\r\n            if (!prevState.hasDiamond && PhysicsUtil.overlaps(heroNewHitbox, this.MAP_DIAMOND)) {\r\n                return { ...newState, hasDiamond: true };\r\n            }\r\n            // If hero overlaps the mud, back to start position!\r\n            if (PhysicsUtil.overlaps(heroNewHitbox, this.MAP_MUDS)) {\r\n                return this.initState();\r\n            }\r\n            // If hero does not overlap walls and does not get out of map bounds, authorize moving\r\n            if (!PhysicsUtil.overlaps(heroNewHitbox, this.MAP_WALLS) && PhysicsUtil.withinStrict(heroNewHitbox, this.MAP_BOUNDS)) {\r\n                return newState;\r\n            } else {\r\n                return prevState;\r\n            }\r\n        });\r\n    }\r\n\r\n    closeModal = () => this.setState({ modal: null });\r\n\r\n    render = () => {\r\n        const { users } = this.props;\r\n\r\n        return (\r\n            <div className=\"position-relative\" style={{ width: this.MAP_BOUNDS.w + \"px\" }}>\r\n                {/* The timer */}\r\n                <div className=\"position-absolute pixel-font ml-2 mt-2\">\r\n                    <FormattedMessage id=\"Timer\" /> : {TimeUtil.msToTime(TimeUtil.msUntilNow(this.state.start_date))}\r\n                </div>\r\n\r\n                {/* The leaderboard */}\r\n                {(users && users.length > 0) &&\r\n                    <div className=\"position-absolute pixel-font mt-2\" style={{ right: 10 }}>\r\n                        <div><FormattedMessage id=\"Leaderboard\" /></div>\r\n                        {users.map(u => {\r\n                            return <div key={u._id}>{u.username} - {TimeUtil.msToTime(u.time)}s</div>\r\n                        })}\r\n                    </div>\r\n                }\r\n\r\n                {/* The map */}\r\n                {MapUtil.toHtml(map, !this.state.hasDiamond)}\r\n\r\n                {/* The hero */}\r\n                <div\r\n                    className=\"position-absolute bg-danger w-20px h-20px\"\r\n                    style={{ left: this.state.x, top: this.state.y }}>\r\n                </div>\r\n\r\n                {this.state.modal}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        users: state.users\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onGetTopUsers: (cbk) => dispatch(getTopUsers(cbk))\r\n    };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Homepage);"]},"metadata":{},"sourceType":"module"}