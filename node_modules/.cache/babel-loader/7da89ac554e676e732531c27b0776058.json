{"ast":null,"code":"import { addLocaleData } from 'react-intl';\nimport { enMessages, frMessages } from '../../i18n';\nimport frLocaleData from 'react-intl/locale-data/fr'; // I18n config. By default, as long as we don't have the user's preferences, check the browser lang and stick to it\n\naddLocaleData(frLocaleData);\nvar language = navigator.language || navigator.userLanguage || navigator.languages[0];\nif (language === undefined || language === null) language = \"en_EN\";\nvar languageWithoutRegionCode = language.toLowerCase().split(/[_-]+/)[0];\nlanguageWithoutRegionCode = \"fr\"; // languageWithoutRegionCode = \"en\";\n\nexport default function i18n() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    lang: languageWithoutRegionCode,\n    messages: findTradFor(languageWithoutRegionCode)\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    default:\n      return state;\n  }\n}\n\nfunction findTradFor(lang) {\n  switch (lang) {\n    case 'fr':\n      return Object.assign(frMessages);\n\n    case 'en':\n      return Object.assign(enMessages);\n\n    default:\n      return enMessages;\n  }\n}\n\n;","map":{"version":3,"sources":["C:\\Users\\Utilisateur\\Downloads\\zelda\\zelda-fe\\src\\reducers\\i18n\\i18nReducer.js"],"names":["addLocaleData","enMessages","frMessages","frLocaleData","language","navigator","userLanguage","languages","undefined","languageWithoutRegionCode","toLowerCase","split","i18n","state","lang","messages","findTradFor","action","type","Object","assign"],"mappings":"AAAA,SAASA,aAAT,QAA8B,YAA9B;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,YAAvC;AACA,OAAOC,YAAP,MAAyB,2BAAzB,C,CAEA;;AACAH,aAAa,CAACG,YAAD,CAAb;AACA,IAAIC,QAAQ,GAAGC,SAAS,CAACD,QAAV,IAAsBC,SAAS,CAACC,YAAhC,IAAgDD,SAAS,CAACE,SAAV,CAAoB,CAApB,CAA/D;AACA,IAAIH,QAAQ,KAAKI,SAAb,IAA0BJ,QAAQ,KAAK,IAA3C,EAAiDA,QAAQ,GAAG,OAAX;AACjD,IAAIK,yBAAyB,GAAGL,QAAQ,CAACM,WAAT,GAAuBC,KAAvB,CAA6B,OAA7B,EAAsC,CAAtC,CAAhC;AAEAF,yBAAyB,GAAG,IAA5B,C,CACA;;AAEA,eAAe,SAASG,IAAT,GAGJ;AAAA,MAHkBC,KAGlB,uEAH0B;AACnCC,IAAAA,IAAI,EAAEL,yBAD6B;AAEnCM,IAAAA,QAAQ,EAAEC,WAAW,CAACP,yBAAD;AAFc,GAG1B;AAAA,MAARQ,MAAQ;;AACT,UAAQA,MAAM,CAACC,IAAf;AACE;AACE,aAAOL,KAAP;AAFJ;AAID;;AAED,SAASG,WAAT,CAAqBF,IAArB,EAA2B;AACzB,UAAQA,IAAR;AACE,SAAK,IAAL;AAAW,aAAOK,MAAM,CAACC,MAAP,CAAclB,UAAd,CAAP;;AACX,SAAK,IAAL;AAAW,aAAOiB,MAAM,CAACC,MAAP,CAAcnB,UAAd,CAAP;;AACX;AAAS,aAAOA,UAAP;AAHX;AAKD;;AAAA","sourcesContent":["import { addLocaleData } from 'react-intl';\r\nimport { enMessages, frMessages } from '../../i18n';\r\nimport frLocaleData from 'react-intl/locale-data/fr';\r\n\r\n// I18n config. By default, as long as we don't have the user's preferences, check the browser lang and stick to it\r\naddLocaleData(frLocaleData);\r\nlet language = navigator.language || navigator.userLanguage || navigator.languages[0];\r\nif (language === undefined || language === null) language = \"en_EN\";\r\nlet languageWithoutRegionCode = language.toLowerCase().split(/[_-]+/)[0];\r\n\r\nlanguageWithoutRegionCode = \"fr\";\r\n// languageWithoutRegionCode = \"en\";\r\n\r\nexport default function i18n(state = {\r\n  lang: languageWithoutRegionCode,\r\n  messages: findTradFor(languageWithoutRegionCode),\r\n}, action) {\r\n  switch (action.type) {\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction findTradFor(lang) {\r\n  switch (lang) {\r\n    case 'fr': return Object.assign(frMessages);\r\n    case 'en': return Object.assign(enMessages);\r\n    default: return enMessages;\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}